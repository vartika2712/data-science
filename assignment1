1. Write a Python program to reverse a string without using any built-in string reversal functions.
2. Implement a function to check if a given string is a palindrome.
3. Write a program to find the largest element in a given list.
4. Implement a function to count the occurrence of each element in a list.
5. Write a Python program to find the second largest number in a list.
6. Implement a function to remove duplicate elements from a list.
7. Write a program to calculate the factorial of a given number.
8. Implement a function to check if a given number is prime.
9. Write a Python program to sort a list of integers in ascending order.
10. Implement a function to find the sum of all numbers in a list.
11. Write a program to find the common elements between two lists.
12. Implement a function to check if a given string is an anagram of another string.
13. Write a Python program to generate all permutations of a given string.
14. Implement a function to calculate the Fibonacci sequence up to a given number of terms.
15. Write a program to find the median of a list of numbers.
16. Implement a function to check if a given list is sorted in non-decreasing order.
17. Write a Python program to find the intersection of two lists.
18. Implement a function to find the maximum subarray sum in a given list.
19. Write a program to remove all vowels from a given string.
20. Implement a function to reverse the order of words in a given sentence.
21. Write a Python program to check if two strings are anagrams of each other.
22. Implement a function to find the first non-repeating character in a string.
23. Write a program to find the prime factors of a given number.
24. Implement a function to check if a given number is a power of two.
25. Write a Python program to merge two sorted lists into a single sorted list.
26. Implement a function to find the mode of a list of numbers.
27. Write a program to find the greatest common divisor (GCD) of two numbers.
28. Implement a function to calculate the square root of a given number.
29. Write a Python program to check if a given string is a valid palindrome ignoring non-alphanumeric characters.
30. Implement a function to find the minimum element in a rotated sorted list.
31. Write a program to find the sum of all even numbers in a list.
32. Implement a function to calculate the power of a number using recursion.
33. Write a Python program to remove duplicates from a list while preserving the order.
34. Implement a function to find the longest common prefix among a list of strings.
35. Write a program to check if a given number is a perfect square.
36. Implement a function to calculate the product of all elements in a list.
37. Write a Python program to reverse the order of words in a sentence while preserving the word order.
38. Implement a function to find the missing number in a given list of consecutive numbers.
39. Write a program to find the sum of digits of a given number.
40. Implement a function to check if a given string is a valid palindrome considering case sensitivity.
41. Write a Python program to find the smallest missing positive integer in a list.
42. Implement a function to find the longest palindrome substring in a given string.
43. Write a program to find the number of occurrences of a given element in a list.
44. Implement a function to check if a given number is a perfect number.
45. Write a Python program to remove all duplicates from a string.
46. Implement a function to find the first missing positive

  Solutions.
  Here are the Python implementations for the given tasks:

1. Reverse a string without using any built-in string reversal functions:
```python
def reverse_string(string):
    reversed_string = ""
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

# Example usage
input_string = "Hello, World!"
reversed_string = reverse_string(input_string)
print(reversed_string)  # Output: "!dlroW ,olleH"
```

2. Check if a given string is a palindrome:
```python
def is_palindrome(string):
    reversed_string = reverse_string(string)
    return string == reversed_string

# Example usage
input_string = "madam"
print(is_palindrome(input_string))  # Output: True
```

3. Find the largest element in a given list:
```python
def find_largest_element(lst):
    largest_element = lst[0]
    for num in lst:
        if num > largest_element:
            largest_element = num
    return largest_element

# Example usage
numbers = [10, 5, 8, 15, 3]
largest_num = find_largest_element(numbers)
print(largest_num)  # Output: 15
```

4. Count the occurrence of each element in a list:
```python
def count_occurrences(lst):
    occurrence_count = {}
    for item in lst:
        occurrence_count[item] = occurrence_count.get(item, 0) + 1
    return occurrence_count

# Example usage
numbers = [1, 2, 2, 3, 3, 3]
occurrences = count_occurrences(numbers)
print(occurrences)  # Output: {1: 1, 2: 2, 3: 3}
```

5. Find the second largest number in a list:
```python
def find_second_largest(lst):
    largest = None
    second_largest = None
    for num in lst:
        if largest is None or num > largest:
            second_largest = largest
            largest = num
        elif second_largest is None or num > second_largest:
            second_largest = num
    return second_largest

# Example usage
numbers = [10, 5, 8, 15, 3]
second_largest_num = find_second_largest(numbers)
print(second_largest_num)  # Output: 10
```

6. Remove duplicate elements from a list:
```python
def remove_duplicates(lst):
    return list(set(lst))

# Example usage
numbers = [1, 2, 2, 3, 3, 3]
unique_numbers = remove_duplicates(numbers)
print(unique_numbers)  # Output: [1, 2, 3]
```

7. Calculate the factorial of a given number:
```python
def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result

# Example usage
num = 5
factorial_result = factorial(num)
print(factorial_result)  # Output: 120
```

8. Check if a given number is prime:
```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Example usage
num = 13
print(is_prime(num))  # Output: True
```

9. Sort a list of integers in ascending order:
```python
def sort_list(lst):
    return sorted(lst)

# Example usage
numbers = [5, 2, 8, 1, 9]
sorted_numbers = sort_list(numbers)
print(sorted_numbers)  # Output: [1, 2, 5, 8, 9]
```

10. Find the sum of all numbers in a list:
```python
def find_sum(lst):
    total = 0
    for num in lst:
        total += num
    return total

# Example usage
numbers = [1, 2, 3, 4, 5]
sum_of_numbers = find_sum(numbers)
print(sum_of_numbers)  # Output: 15
```

11. Find the common elements between two lists:
```python
def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common_elements = find_common_elements(list1, list2)
print(common_elements)  # Output: [4, 5]
```

12. Check if a given string is an anagram of another string:
```python
def is_anagram(str1, str2):
    return sorted(str1) == sorted(str2)

# Example usage
string1 = "listen"
string2 = "silent"
print(is_anagram(string1, string2))  # Output: True
```

13. Generate all permutations of a given string:
```python
def permutations(string):
    if len(string) <= 1:
        return [string]
    perms = []
    for i, char in enumerate(string):
        for perm in permutations(string[:i] + string[i+1:]):
            perms.append(char + perm)
    return perms

# Example usage
input_string = "abc"
perms = permutations(input_string)
print(perms)  # Output: ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
```

14. Calculate the Fibonacci sequence up to a given number of terms:
```python
def fibonacci(n):
    sequence = [0, 1]
    while len(sequence) < n:
        next_num = sequence[-1] + sequence[-2]
        sequence.append(next_num)
    return sequence

# Example usage
terms = 10
fib_sequence = fibonacci(terms)
print(fib_sequence)  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
```

15. Find the median of a list of numbers:
```python
def find_median(lst):
    sorted_list = sorted(lst)
    n = len(sorted_list)
    if n % 2 == 0:
        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2
    else:
        median = sorted_list[n//2]
    return median

# Example usage
numbers = [5, 2, 8, 1, 9]
median = find_median(numbers)
print(median)  # Output: 5
```

16. Check if a given list is sorted in non-decreasing order:
```python
def is_sorted(lst):
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))

# Example usage
numbers1 = [1, 2, 3, 4, 5]
numbers2 = [5, 2, 8, 1, 9]
print(is_sorted(numbers1))  # Output: True
print(is_sorted(numbers2

))  # Output: False
```

17. Find the intersection of two lists:
```python
def find_intersection(list1, list2):
    return list(set(list1) & set(list2))

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
intersection = find_intersection(list1, list2)
print(intersection)  # Output: [4, 5]
```

18. Find the maximum subarray sum in a given list:
```python
def find_max_subarray_sum(lst):
    max_sum = 0
    current_sum = 0
    for num in lst:
        current_sum += num
        if current_sum < 0:
            current_sum = 0
        elif current_sum > max_sum:
            max_sum = current_sum
    return max_sum

# Example usage
numbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
max_sum = find_max_subarray_sum(numbers)
print(max_sum)  # Output: 6
```

19. Remove all vowels from a given string:
```python
def remove_vowels(string):
    vowels = "aeiouAEIOU"
    return "".join(char for char in string if char not in vowels)

# Example usage
input_string = "Hello, World!"
output_string = remove_vowels(input_string)
print(output_string)  # Output: "Hll, Wrld!"
```

20. Reverse the order of words in a given sentence:
```python
def reverse_words(sentence):
    words = sentence.split()
    reversed_words = " ".join(reversed(words))
    return reversed_words

# Example usage
input_sentence = "Hello, World!"
reversed_sentence = reverse_words(input_sentence)
print(reversed_sentence)  # Output: "World! Hello,"
```

21. Check if two strings are anagrams of each other:
```python
def are_anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

# Example usage
string1 = "listen"
string2 = "silent"
print(are_anagrams(string1, string2))  # Output: True
```

22. Find the first non-repeating character in a string:
```python
def find_first_non_repeating(string):
    char_count = {}
    for char in string:
        char_count[char] = char_count.get(char, 0) + 1
    for char in string:
        if char_count[char] == 1:
            return char
    return None

# Example usage
input_string = "abacabad"
first_non_repeating = find_first_non_repeating(input_string)
print(first_non_repeating)  # Output: "c"
```

23. Find the prime factors of a given number:
```python
def find_prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

# Example usage
num = 36
prime_factors = find_prime_factors(num)
print(prime_factors)  # Output: [2, 2, 3, 3]
```

24. Check if a given number is a power of two:
```python
def is_power_of_two(n):
    return n > 0 and (n & (n - 1)) == 0

# Example usage
num1 = 16
num2 = 20
print(is_power_of_two(num1))  # Output: True
print(is_power_of_two(num2))  # Output: False
```

25. Merge two sorted lists into a single sorted list:
```python
def merge_sorted_lists(list1, list2):
    merged_list = []
    i = j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    merged_list.extend(list1[i:])
    merged_list.extend(list2[j:])
    return merged_list

# Example usage
list1 = [1, 3, 5]
list2 = [2, 4, 6]
merged_list = merge_sorted_lists(list1, list2)
print(merged_list)  # Output: [1, 2, 3, 4, 5, 6]
```

26. Find the mode of a list of numbers:
```python
from collections import Counter

def find_mode(lst):
    count = Counter(lst)
    max_count = max(count.values())
    modes = [num for num, freq in count.items() if freq == max_count]
    return modes

# Example usage
numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
mode = find_mode(numbers)
print(mode)  # Output: [4]
```

27. Find the greatest common divisor (GCD) of two numbers:
```python
def find_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Example usage
num1 = 36
num2 = 48
gcd = find_gcd(num1, num2)
print(gcd)  # Output: 12
```

28. Calculate the square root of a given number:
```python
def square_root(n):
    if n < 0:
        raise ValueError("Square root is not defined for negative numbers.")
    guess = n
    while True:
        next_guess = (guess + n/guess) / 2
        if abs(guess - next_guess) < 1e-9:
            return next_guess
        guess = next_guess

# Example usage
num = 25
sqrt = square_root(num)
print(sqrt)  # Output: 5.0
```

29. Check if a given string is a valid palindrome ignoring non-alphanumeric characters:
```python
import re

def is_valid_palindrome(string):
    cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', string.lower())
    return cleaned_string == cleaned_string[::-1]

# Example usage
input_string = "A man, a plan, a canal: Panama"
print(is_valid_palindrome(input_string))  # Output: True
```

30. Find the minimum element in a rotated sorted list:
```python
def find_minimum_rotated(lst):
    left = 0
    right = len(lst) - 1
    while left < right:
        mid = (left + right) // 2
        if lst[mid] > lst[right]:
            left = mid + 1
        else:
            right = mid
    return lst[left]

# Example usage
numbers = [4, 5, 6, 7, 0, 1, 2]
min_rotated = find_minimum_rotated(numbers)
print(min_rotated) 

Sure! Here are the solutions to the programming tasks you provided:

31. Program to find the sum of all even numbers in a list:
```python
def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)
```

32. Function to calculate the power of a number using recursion:
```python
def power(base, exponent):
    if exponent == 0:
        return 1
    elif exponent < 0:
        return 1 / power(base, -exponent)
    else:
        return base * power(base, exponent - 1)
```

33. Python program to remove duplicates from a list while preserving the order:
```python
def remove_duplicates(lst):
    seen = set()
    return [x for x in lst if not (x in seen or seen.add(x))]
```

34. Function to find the longest common prefix among a list of strings:
```python
def longest_common_prefix(strs):
    if not strs:
        return ""
    min_len = min(len(s) for s in strs)
    for i in range(min_len):
        if len(set(s[i] for s in strs)) != 1:
            return strs[0][:i]
    return strs[0][:min_len]
```

35. Program to check if a given number is a perfect square:
```python
import math

def is_perfect_square(num):
    if num < 0:
        return False
    root = int(math.sqrt(num))
    return root * root == num
```

36. Function to calculate the product of all elements in a list:
```python
def product_of_list(lst):
    result = 1
    for num in lst:
        result *= num
    return result
```

37. Python program to reverse the order of words in a sentence while preserving the word order:
```python
def reverse_words(sentence):
    words = sentence.split()
    return ' '.join(words[::-1])
```

38. Function to find the missing number in a given list of consecutive numbers:
```python
def find_missing_number(lst):
    n = len(lst) + 1
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(lst)
    return expected_sum - actual_sum
```

39. Program to find the sum of digits of a given number:
```python
def sum_of_digits(num):
    return sum(int(digit) for digit in str(num))
```

40. Function to check if a given string is a valid palindrome considering case sensitivity:
```python
def is_palindrome(string):
    return string == string[::-1]
```

41. Python program to find the smallest missing positive integer in a list:
```python
def find_smallest_missing_positive(lst):
    n = len(lst)
    for i in range(n):
        while 1 <= lst[i] <= n and lst[i] != lst[lst[i] - 1]:
            lst[lst[i] - 1], lst[i] = lst[i], lst[lst[i] - 1]
    for i in range(n):
        if lst[i] != i + 1:
            return i + 1
    return n + 1
```

42. Function to find the longest palindrome substring in a given string:
```python
def longest_palindrome_substring(string):
    n = len(string)
    longest = ""
    for i in range(n):
        for j in range(i, n):
            substring = string[i:j + 1]
            if substring == substring[::-1] and len(substring) > len(longest):
                longest = substring
    return longest
```

43. Program to find the number of occurrences of a given element in a list:
```python
def count_occurrences(lst, element):
    return lst.count(element)
```

44. Function to check if a given number is a perfect number:
```python
def is_perfect_number(num):
    if num <= 0:
        return False
    divisors = [i for i in range(1, num) if num % i == 0]
    return sum(divisors) == num
```

45. Python program to remove all duplicates from a string:
```python
def remove_duplicates(string):
    return ''.join(set(string))
```

46. Function to find the first missing positive integer in a list:
```python
def find_first_missing_positive(lst):
    n = len(lst)
    for i in range(n):
        while 1 <= lst[i] <= n and lst[i] != lst[lst[i] - 1]:
            lst[lst[i] - 1], lst[i] = lst[i], lst[lst[i] - 1]
    for i in range(n):
        if lst[i] != i + 1:
            return i + 1
    return n + 1
```

Please let me know if you need any further explanation or assistance with these solutions.


